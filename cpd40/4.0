1. Prereq steps(Only need run one time)
1.a Config global pull secrets
(NOTE: please run below command to check if already exist secrets for the registry. you can skip if exist.)
oc get secret/pull-secret -n openshift-config -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | grep us.icr.io
oc get secret/pull-secret -n openshift-config -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | grep hyc-cp4d-team-bootstrap-2-docker-local.artifactory.swg-devops.com
for us.icr.io:
pull_secret=$(echo -n "iamapikey:a21xr8XGsjyX78ou-dVAX4yhjOJdRfvez4sMG3wD79Gv" | base64 -w0)
oc get secret/pull-secret -n openshift-config -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | sed -e 's|:{|:{"us.icr.io/4_0_rc1":{"auth":"'$pull_secret'"\},|' > /tmp/dockerconfig.json
oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=/tmp/dockerconfig.json
for hyc-cp4d-team-bootstrap-2-docker-local.artifactory.swg-devops.com
NOTE: ibm-zen-operator-catalog hardcoded this image: hyc-cp4d-team-bootstrap-2-docker-local.artifactory.swg-devops.com/ibm-zen-operator-bundle@sha256:5508dfe8e385ff30115f78ad121967263da5179df278848c1237cebf0c7c49bd
We need create pull secrets for this registry as well.
pull_secret=$(echo -n "shwangxy@cn.ibm.com:AKCp5ekSsZ4YnxNyp15nYRvsSeAJBABeLnuAyGESQne2xXcYcSbYiiRiHS9NRuAbn5J7HEe6Z" | base64 -w0)
oc get secret/pull-secret -n openshift-config -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | sed -e 's|:{|:{"hyc-cp4d-team-bootstrap-2-docker-local.artifactory.swg-devops.com":{"auth":"'$pull_secret'"\},|' > /tmp/dockerconfig.json
oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=/tmp/dockerconfig.json
1.b Config ImageContentSourcePolicy
cat << EOF | oc apply -f -
apiVersion: operator.openshift.io/v1alpha1
kind: ImageContentSourcePolicy
metadata:
  name: mirror-config
spec:
  repositoryDigestMirrors:
  - mirrors:
    - us.icr.io/4_0_rc1
    source: quay.io/opencloudio
  - mirrors:
    - us.icr.io/4_0_rc1
    source: icr.io/cpopen
  - mirrors:
    - us.icr.io/4_0_rc1
    source: docker.io/ibmcom
  - mirrors:
    - us.icr.io/4_0_rc1
    source: cp.icr.io/cp/cpd
  - mirrors:
    - us.icr.io/4_0_rc1
    source: cp.icr.io/cp
EOF
waiting for all nodes Ready.
2. Install Bedrock:
oc new-project ibm-common-services
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: opencloud-operators
  namespace: openshift-marketplace
spec:
  displayName: IBMCS Test Operators
  publisher: IBM
  sourceType: grpc
  image: docker.io/ibmcom/ibm-common-service-catalog:latest
  updateStrategy:
    registryPoll:
      interval: 45m
EOF
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: ibm-common-services
spec:
  targetNamespaces:
  - ibm-common-services
EOF
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-common-service-operator
  namespace: ibm-common-services
spec:
  channel: v3
  installPlanApproval: Automatic
  name: ibm-common-service-operator
  source: opencloud-operators
  sourceNamespace: openshift-marketplace
EOF
3. Install ibm-zen 1.1.0-279
Create catalogsource:
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: ibm-zen-operator-catalog
  namespace: openshift-marketplace
spec:
  sourceType: grpc
  image: quay.io/opencloudio/ibm-zen-operator-catalog@sha256:fa94584adfe62d046aca5a7ee31e287b539f06e8c57a6789106397fe3d99f72a
  imagePullPolicy: Always
  displayName: Cloud Pak for Data
  publisher: IBM
EOF
Modify the zen-operator entry under spec.operators so that it points to the ibm-zen-operator-catalog
oc edit operandregistry common-service -n ibm-common-services
Create operandrequest in zen
oc new-project zen
cat << EOF | oc apply -f -
apiVersion: operator.ibm.com/v1alpha1
kind: OperandRequest
metadata:
  name: zen-service
  namespace: zen
spec:
  requests:
    - operands:
        - name: ibm-zen-operator
        - name: ibm-cert-manager-operator
      registry: common-service
      registryNamespace: ibm-common-services
EOF
Create zenservice CRD in zen:
cat << EOF | oc apply -f -
apiVersion: zen.cpd.ibm.com/v1
kind: ZenService
metadata:
  name: lite-cr
  namespace: zen
spec:
  csNamespace: ibm-common-services
  storageClass: nfs-client
  zenCoreMetaDbStorageClass: nfs-client
  generateAdminPassword: false
  iamIntegration: false
  cert_manager_enabled: true
  upgrade_3_5_x_to_4_0: false
  cloudpakfordata: true
  cpdlegacy: false
  version: "4.0.0"
EOF
Check status by running:
oc get zenservice lite-cr -o json -n zen | jq ".status.$service_status"
once show Completed. zen installed.
4. Install CCS 1.0.0-639
Download case ibm-ccs-1.0.0-639.tgz
Create catalogsource in openshift-marketplace namespace:
 cloudctl case launch --case ibm-ccs-1.0.0-639.tgz --namespace openshift-marketplace --action installCatalog --inventory ccsSetup --tolerance=1
Create subscription in ibm-common-services namespace:
 cloudctl case launch --case ibm-ccs-1.0.0-639.tgz --namespace ibm-common-services --action installOperator --inventory ccsSetup --tolerance=1
Create ccs CRD in zen:
cat << EOF | oc apply -f -
apiVersion: ccs.cpd.ibm.com/v1beta1
kind: CCS
metadata:
  name: ccs-cr
  namespace: zen
spec:
  version: "4.0.0"
  size: "small"
  storageClass: "nfs-client"
  cert_manager_enabled: true
  license:
    accept: true
    license: "Enterprise"
  docker_registry_prefix: cp.icr.io/cp/cpd
EOF
Check status by running:
oc get ccs ccs-cr -o json -n zen | jq ".status.$service_status"
once show Completed. ccs installed.
5. Install db2uoperator 4.0.0-3506-2130
Download case ibm-db2uoperator-4.0.0-3506-2130.tgz
Create catalogsource in openshift-marketplace namespace:
 cloudctl case launch --case ibm-db2uoperator-4.0.0-3506-2130.tgz --namespace ibm-common-services --action installCatalog --inventory db2uOperatorSetup --tolerance=1
Create subscription in ibm-common-services namespace:
 cloudctl case launch --case ibm-db2uoperator-4.0.0-3506-2130.tgz --namespace ibm-common-services --action installOperator --inventory db2uOperatorSetup --tolerance=1
6. Install db2aaservices 4.0.0-1151.344
Download case ibm-db2aaservice-4.0.0-1151.344.tgz
Create catalogsource in openshift-marketplace namespace:
 cloudctl case launch --case ibm-db2aaservice-4.0.0-1151.344.tgz --namespace ibm-common-services --action installCatalog --inventory db2aaserviceOperatorSetup  --tolerance=1
Create subscription in ibm-common-services namespace:
 cloudctl case launch --case ibm-db2aaservice-4.0.0-1151.344.tgz --namespace ibm-common-services --action installOperator --inventory db2aaserviceOperatorSetup --tolerance=1
Create db2aaserviceservices CRD in zen:
cat << EOF | oc apply -f -
apiVersion: databases.cpd.ibm.com/v1
kind: Db2aaserviceService
metadata:
  name: db2aaserviceservice-cr
spec:
  db_type: db2aaservice
  upgrade_3_5_x_to_4_0: false
  license:
    accept: true
    license: "Enterprise"
EOF
Check status by running:
oc get db2aaserviceservice db2aaserviceservice-cr -o json -n zen | jq ".status.$service_status"
once show Completed. zen installed.
7. Install WKC 4.0.0-311
Download case ibm-wkc-4.0.0-311.tgz
Create catalogsource in openshift-marketplace namespace:
cloudctl case launch --case ibm-wkc-4.0.0-311.tgz --namespace ibm-common-services --action installCatalog --inventory wkcOperatorSetup --tolerance=1
Create subscription in ibm-common-services namespace:
cloudctl case launch --case ibm-wkc-4.0.0-311.tgz --namespace ibm-common-services --action installOperator --inventory wkcOperatorSetup --tolerance=1
Create wkc CRD in zen:
cat << EOF | oc apply -f -
apiVersion: wkc.cpd.ibm.com/v1alpha1
kind: WKC
metadata:
  name: wkc-core-cr
spec:
  version: "4.0.0"
  storageClass: nfs-client
  license:
    accept: true
    license: "Enterprise"
  storage_class_name: nfs-client
  docker_registry_prefix: cp.icr.io/cp/cpd
EOF
Check status by running:
oc get wkc wkc-core-cr -o json -n zen | jq ".status.$service_status"
once show Completed. zen installed.
8. Install IIS 4.0.0-268
Download case ibm-iis-4.0.0-268.tgz
Crate restriced scc for iis:
cat << EOF | oc apply -f -
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities: null
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: WKC/IIS provides all features of the restricted SCC
      but runs as user 10032.
  name: wkc-iis-scc
readOnlyRootFilesystem: false
requiredDropCapabilities:
- KILL
- MKNOD
- SETUID
- SETGID
runAsUser:
  type: MustRunAs
  uid: 10032
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
users:
- system:serviceaccount:zen:wkc-iis-sa
EOF
install iis operator in ibm-common-services namespace:
cloudctl case launch --case ibm-iis-4.0.0-268.tgz --namespace ibm-common-services --action installOperatorNative --inventory iisOperatorSetup --tolerance=1
Create IIS CRD in zen:
cat << EOF | oc apply -f -
apiVersion: iis.cpd.ibm.com/v1alpha1
kind: IIS
metadata:
  name: iis-cr
spec:
  version: "4.0.0"
  storageClass: nfs-client
  license:
    accept: true
    license: "Enterprise"
  storage_class_name: nfs-client
  docker_registry_prefix: cp.icr.io/cp/cpd
  use_dynamic_provisioning: true
EOF
Check status by running:
oc get iis iis-cr -o json -n zen | jq ".status.$service_status"
once show Completed. zen installed.
9. Install UG:
Create UG CRD in zen
cat << EOF | oc apply -f -
apiVersion: wkc.cpd.ibm.com/v1alpha1
kind: UG
metadata:
  name: ug-cr
spec:
  version: "4.0.0"
  storageClass: nfs-client
  license:
    accept: true
  storage_class_name: nfs-client
  docker_registry_prefix: cp.icr.io/cp/cpd
EOF
Check status by running:
oc get ug ug-cr -o json -n zen | jq ".status.$service_status"
once show Completed. zen installed.
